import os
import pytest
import json
import pandas as pd
from unittest.mock import patch, MagicMock, mock_open
from datetime import datetime, date, time

# Import c√°c h√†m t·ª´ app.py ƒë·ªÉ test
from app import (
    # Utility Functions
    load_posts, save_posts, get_safe_posts_data, prepare_dataframe,
    
    # Facebook API Functions  
    fetch_facebook_posts, fetch_post_stats, get_facebook_data,
    
    # Google Sheets Functions
    get_gsheet_client, ensure_sheet_header, schedule_post_to_sheet,
    
    # AI & Content Functions
    generate_caption, call_ai_analysis,
    
    # Image Upload Functions
    upload_image_to_gdrive, upload_image_to_cloudinary, handle_image_upload,
    
    # UI Helper Functions
    display_analytics_stats, create_analytics_chart, beautify_ai_output, safe_remove_post
)

TEST_FILE = "test_posts.json"
SAMPLE_POSTS = [
    {"id": "001", "caption": "Test post 1", "likes": 10, "comments": 5},
    {"id": "002", "caption": "Test post 2", "likes": 20, "comments": 3}
]

# ==========================================
# ====== UTILITY FUNCTIONS TESTS ======
# ==========================================

class TestUtilityFunctions:
    
    def test_save_and_load_posts_success(self):
        """Test l∆∞u v√† ƒë·ªçc file JSON th√†nh c√¥ng"""
        test_data = [{"id": "001", "caption": "Test b√†i vi·∫øt", "platform": "Facebook"}]
        save_posts(test_data, filename=TEST_FILE)
        
        assert os.path.exists(TEST_FILE), "‚ùå File kh√¥ng t·ªìn t·∫°i sau khi l∆∞u"
        
        loaded = load_posts(filename=TEST_FILE)
        assert loaded == test_data, "‚ùå D·ªØ li·ªáu ƒë·ªçc kh√¥ng kh·ªõp"
        
        # Cleanup
        if os.path.exists(TEST_FILE):
            os.remove(TEST_FILE)
    
    def test_load_posts_file_not_exists(self):
        """Test ƒë·ªçc file kh√¥ng t·ªìn t·∫°i"""
        result = load_posts("non_existent_file.json")
        assert result == [], "‚ùå Ph·∫£i tr·∫£ v·ªÅ list r·ªóng khi file kh√¥ng t·ªìn t·∫°i"
    
    @patch("builtins.open", side_effect=json.JSONDecodeError("Invalid JSON", "", 0))
    def test_load_posts_invalid_json(self, mock_file):
        """Test x·ª≠ l√Ω file JSON kh√¥ng h·ª£p l·ªá"""
        with patch("os.path.exists", return_value=True):
            result = load_posts("invalid.json")
            assert result == [], "‚ùå Ph·∫£i tr·∫£ v·ªÅ list r·ªóng khi JSON invalid"
    
    @patch("app.st.session_state", {"posts": SAMPLE_POSTS})
    def test_get_safe_posts_data_success(self):
        """Test l·∫•y d·ªØ li·ªáu t·ª´ session state th√†nh c√¥ng"""
        result = get_safe_posts_data()
        assert result == SAMPLE_POSTS, "‚ùå D·ªØ li·ªáu t·ª´ session state kh√¥ng ƒë√∫ng"
    
    @patch("app.st.session_state", {"posts": "invalid_data"})
    def test_get_safe_posts_data_invalid_type(self):
        """Test x·ª≠ l√Ω d·ªØ li·ªáu session state kh√¥ng ph·∫£i list"""
        result = get_safe_posts_data()
        assert result == [], "‚ùå Ph·∫£i tr·∫£ v·ªÅ list r·ªóng khi data kh√¥ng ph·∫£i list"
    
    @patch("app.st.session_state", {})
    def test_get_safe_posts_data_missing_key(self):
        """Test x·ª≠ l√Ω key kh√¥ng t·ªìn t·∫°i trong session state"""
        result = get_safe_posts_data()
        assert result == [], "‚ùå Ph·∫£i tr·∫£ v·ªÅ list r·ªóng khi key kh√¥ng t·ªìn t·∫°i"
    
    def test_prepare_dataframe_complete_data(self):
        """Test chu·∫©n b·ªã DataFrame v·ªõi d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß"""
        test_data = [
            {"likes": 10, "comments": 5, "shares": 2, "reactions": 15, "time": "09:00"},
            {"likes": 20, "comments": 8, "shares": 3, "reactions": 25, "time": "14:00"}
        ]
        df = prepare_dataframe(test_data)
        
        assert len(df) == 2, "‚ùå DataFrame ph·∫£i c√≥ 2 rows"
        assert "likes" in df.columns, "‚ùå Thi·∫øu c·ªôt likes"
        assert "time" in df.columns, "‚ùå Thi·∫øu c·ªôt time"
        assert df["likes"].dtype == "int64", "‚ùå C·ªôt likes ph·∫£i l√† int"
    
    def test_prepare_dataframe_missing_columns(self):
        """Test chu·∫©n b·ªã DataFrame v·ªõi thi·∫øu columns"""
        test_data = [{"caption": "Test", "platform": "Facebook"}]
        df = prepare_dataframe(test_data, ["likes", "comments", "shares"])
        
        assert "likes" in df.columns, "‚ùå Ph·∫£i t·∫°o c·ªôt likes"
        assert df["likes"].iloc[0] == 0, "‚ùå Gi√° tr·ªã m·∫∑c ƒë·ªãnh ph·∫£i l√† 0"
        assert "time" in df.columns, "‚ùå Ph·∫£i t·∫°o c·ªôt time"
        assert df["time"].iloc[0] == "unknown", "‚ùå Time m·∫∑c ƒë·ªãnh ph·∫£i l√† 'unknown'"

# ==========================================
# ====== FACEBOOK API FUNCTIONS TESTS ======
# ==========================================

class TestFacebookAPIFunctions:
    
    @patch("app.requests.get")
    def test_fetch_facebook_posts_success(self, mock_get):
        """Test l·∫•y posts Facebook th√†nh c√¥ng"""
        mock_response = MagicMock()
        mock_response.json.return_value = {
            "data": [
                {"id": "123", "message": "Test post", "created_time": "2024-01-01T10:00:00+0000"}
            ]
        }
        mock_get.return_value = mock_response
        
        result = fetch_facebook_posts("page_id", "token", 10)
        
        assert len(result) == 1, "‚ùå Ph·∫£i tr·∫£ v·ªÅ 1 post"
        assert result[0]["id"] == "123", "‚ùå Post ID kh√¥ng ƒë√∫ng"
        
        # Verify API call
        mock_get.assert_called_once()
        args, kwargs = mock_get.call_args
        assert "page_id/posts" in args[0], "‚ùå URL kh√¥ng ƒë√∫ng"
    
    @patch("app.requests.get")
    def test_fetch_facebook_posts_empty_response(self, mock_get):
        """Test x·ª≠ l√Ω response r·ªóng t·ª´ Facebook API"""
        mock_response = MagicMock()
        mock_response.json.return_value = {}
        mock_get.return_value = mock_response
        
        result = fetch_facebook_posts("page_id", "token")
        
        assert result == [], "‚ùå Ph·∫£i tr·∫£ v·ªÅ list r·ªóng khi kh√¥ng c√≥ data"
    
    @patch("app.requests.get")
    def test_fetch_post_stats_success(self, mock_get):
        """Test l·∫•y stats c·ªßa post th√†nh c√¥ng"""
        mock_response = MagicMock()
        mock_response.json.return_value = {
            "message": "Test caption",
            "likes": {"summary": {"total_count": 50}},
            "comments": {"summary": {"total_count": 10}},
            "shares": {"count": 5},
            "reactions": {"summary": {"total_count": 60}}
        }
        mock_get.return_value = mock_response
        
        result = fetch_post_stats("post_id", "token")
        
        assert result["likes"]["summary"]["total_count"] == 50, "‚ùå Likes count kh√¥ng ƒë√∫ng"
        assert result["comments"]["summary"]["total_count"] == 10, "‚ùå Comments count kh√¥ng ƒë√∫ng"

# ==========================================
# ====== AI & CONTENT FUNCTIONS TESTS ======
# ==========================================

class TestAIContentFunctions:
    
    @patch("app.client.chat.completions.create")
    def test_generate_caption_success(self, mock_gpt):
        """Test sinh caption th√†nh c√¥ng"""
        mock_response = MagicMock()
        mock_response.choices[0].message.content = "Caption ƒë·∫πp v·ªõi emoji üå∏ #xuongbinhgom"
        mock_gpt.return_value = mock_response
        
        result = generate_caption("B√¨nh hoa", "g·ªëm, th·ªß c√¥ng", "Facebook")
        
        assert "#xuongbinhgom" in result, "‚ùå Ph·∫£i c√≥ hashtag #xuongbinhgom"
        assert len(result) > 10, "‚ùå Caption ph·∫£i c√≥ ƒë·ªô d√†i h·ª£p l√Ω"
        
        # Verify API call v·ªõi ƒë√∫ng params
        mock_gpt.assert_called_once()
        call_args = mock_gpt.call_args[1]
        assert call_args["model"] == "openai/gpt-3.5-turbo"
        assert call_args["temperature"] == 0.95
    
    @patch("app.client.chat.completions.create")
    def test_generate_caption_missing_hashtag(self, mock_gpt):
        """Test t·ª± ƒë·ªông th√™m hashtag n·∫øu thi·∫øu"""
        mock_response = MagicMock()
        mock_response.choices[0].message.content = "Caption kh√¥ng c√≥ hashtag"
        mock_gpt.return_value = mock_response
        
        result = generate_caption("Product", "keywords", "Instagram")
        
        assert "#xuongbinhgom" in result, "‚ùå Ph·∫£i t·ª± ƒë·ªông th√™m hashtag"
    
    @patch("app.client.chat.completions.create")
    def test_generate_caption_api_error(self, mock_gpt):
        """Test x·ª≠ l√Ω l·ªói OpenAI API"""
        from openai import OpenAIError
        mock_gpt.side_effect = OpenAIError("API Error")
        
        result = generate_caption("Product", "keywords", "Facebook")
        
        assert result.startswith("‚ö†Ô∏è"), "‚ùå Ph·∫£i tr·∫£ v·ªÅ error message"
        assert "GPT" in result, "‚ùå Error message ph·∫£i ch·ª©a th√¥ng tin v·ªÅ GPT"
    
    @patch("app.client.chat.completions.create")
    def test_call_ai_analysis_success(self, mock_gpt):
        """Test g·ªçi AI analysis th√†nh c√¥ng"""
        mock_response = MagicMock()
        mock_response.choices[0].message.content = "Ph√¢n t√≠ch chi ti·∫øt v·ªÅ hi·ªáu qu·∫£ b√†i vi·∫øt"
        mock_gpt.return_value = mock_response
        
        prompt = "Ph√¢n t√≠ch d·ªØ li·ªáu marketing"
        result = call_ai_analysis(prompt, temperature=0.8)
        
        assert "ph√¢n t√≠ch" in result.lower(), "‚ùå K·∫øt qu·∫£ ph·∫£i ch·ª©a t·ª´ 'ph√¢n t√≠ch'"
        
        # Verify custom temperature
        call_args = mock_gpt.call_args[1]
        assert call_args["temperature"] == 0.8

# ==========================================
# ====== IMAGE UPLOAD FUNCTIONS TESTS ======
# ==========================================

class TestImageUploadFunctions:
    
    @patch("app.cloudinary.uploader.upload")
    def test_upload_image_to_cloudinary_success(self, mock_upload):
        """Test upload ·∫£nh l√™n Cloudinary th√†nh c√¥ng"""
        mock_upload.return_value = {"secure_url": "https://res.cloudinary.com/test/image.jpg"}
        
        image_bytes = b"fake-image-data"
        result = upload_image_to_cloudinary(image_bytes, "custom_preset")
        
        assert result.startswith("https://res.cloudinary.com"), "‚ùå URL kh√¥ng ƒë√∫ng format"
        
        # Verify upload call
        mock_upload.assert_called_once_with(
            image_bytes,
            upload_preset="custom_preset",
            resource_type="image"
        )
    
    @patch("app.service_account.Credentials.from_service_account_info")
    @patch("app.build")
    @patch("app.st.secrets", {"gdrive_service_account": {"type": "service_account"}})
    def test_upload_image_to_gdrive_success(self, mock_build, mock_creds):
        """Test upload ·∫£nh l√™n Google Drive th√†nh c√¥ng"""
        # Mock Google Drive service
        mock_service = MagicMock()
        mock_files = mock_service.files.return_value
        mock_files.create.return_value.execute.return_value = {"id": "fake_file_id"}
        mock_build.return_value = mock_service
        
        image_bytes = b"fake-image-data"
        result = upload_image_to_gdrive(image_bytes, "test.jpg")
        
        assert result == "https://drive.google.com/uc?id=fake_file_id", "‚ùå URL kh√¥ng ƒë√∫ng"
        
        # Verify file creation v√† permission setting
        mock_files.create.assert_called_once()
        mock_service.permissions().create.assert_called_once()
    
    @patch("app.upload_image_to_cloudinary")
    @patch("app.upload_image_to_gdrive")
    def test_handle_image_upload_instagram(self, mock_gdrive, mock_cloudinary):
        """Test router function cho Instagram"""
        mock_cloudinary.return_value = "https://cloudinary.com/test.jpg"
        
        mock_file = MagicMock()
        mock_file.read.return_value = b"image-data"
        
        result = handle_image_upload(mock_file, "Instagram")
        
        assert result == "https://cloudinary.com/test.jpg", "‚ùå Ph·∫£i d√πng Cloudinary cho IG"
        mock_cloudinary.assert_called_once()
        mock_gdrive.assert_not_called()
    
    @patch("app.upload_image_to_cloudinary")
    @patch("app.upload_image_to_gdrive")
    def test_handle_image_upload_facebook(self, mock_gdrive, mock_cloudinary):
        """Test router function cho Facebook"""
        mock_gdrive.return_value = "https://drive.google.com/uc?id=123"
        
        mock_file = MagicMock()
        mock_file.read.return_value = b"image-data"
        mock_file.name = "test.jpg"
        
        result = handle_image_upload(mock_file, "Facebook")
        
        assert result.startswith("https://drive.google.com"), "‚ùå Ph·∫£i d√πng GDrive cho FB"
        mock_gdrive.assert_called_once()
        mock_cloudinary.assert_not_called()
    
    def test_handle_image_upload_no_file(self):
        """Test x·ª≠ l√Ω khi kh√¥ng c√≥ file"""
        result = handle_image_upload(None, "Facebook")
        assert result is None, "‚ùå Ph·∫£i tr·∫£ v·ªÅ None khi kh√¥ng c√≥ file"

# ==========================================
# ====== UI HELPER FUNCTIONS TESTS ======
# ==========================================

class TestUIHelperFunctions:
    
    @patch("app.st.markdown")
    def test_display_analytics_stats_success(self, mock_markdown):
        """Test hi·ªÉn th·ªã th·ªëng k√™ t·ªïng h·ª£p"""
        test_df = pd.DataFrame({
            "likes": [10, 20, 30],
            "comments": [5, 8, 12],
            "shares": [2, 3, 5],
            "reactions": [15, 25, 35]
        })
        
        display_analytics_stats(test_df)
        
        # Verify ƒë∆∞·ª£c g·ªçi v·ªõi HTML content
        assert mock_markdown.call_count == 2, "‚ùå Ph·∫£i g·ªçi st.markdown 2 l·∫ßn"
        
        # Check t·ªïng s·ªë trong HTML
        html_content = mock_markdown.call_args_list[1][0][0]
        assert "60" in html_content, "‚ùå T·ªïng likes ph·∫£i l√† 60"
        assert "25" in html_content, "‚ùå T·ªïng comments ph·∫£i l√† 25"
    
    def test_beautify_ai_output_headers(self):
        """Test format AI output v·ªõi headers"""
        content = "Ti√™u ƒë·ªÅ ch√≠nh:<br>- ƒêi·ªÉm 1<br>- ƒêi·ªÉm 2<br>Ph·∫ßn k·∫øt lu·∫≠n"
        
        result = beautify_ai_output(content)
        
        assert "background:#e3f2fd" in result, "‚ùå Ph·∫£i c√≥ background cho header"
        assert "üí°" in result, "‚ùå Ph·∫£i c√≥ emoji cho header"
        assert "‚úîÔ∏è" in result, "‚ùå Ph·∫£i c√≥ checkmark cho list items"
    
    def test_beautify_ai_output_lists(self):
        """Test format AI output v·ªõi danh s√°ch"""
        content = "- Item 1<br>- Item 2<br>1. Numbered item"
        
        result = beautify_ai_output(content)
        
        assert "<ul" in result, "‚ùå Ph·∫£i t·∫°o ul tag"
        assert "</ul>" in result, "‚ùå Ph·∫£i ƒë√≥ng ul tag"
        assert "list-style:none" in result, "‚ùå Ph·∫£i remove default list style"
    
    @patch("app.st.session_state", {"posts": SAMPLE_POSTS})
    @patch("app.save_posts")
    def test_safe_remove_post_valid_index(self, mock_save):
        """Test x√≥a post v·ªõi index h·ª£p l·ªá"""
        safe_remove_post(1)  # X√≥a post ƒë·∫ßu ti√™n (1-indexed)
        
        # Verify save_posts ƒë∆∞·ª£c g·ªçi
        mock_save.assert_called_once()
    
    @patch("app.st.session_state", {"posts": SAMPLE_POSTS})
    @patch("app.save_posts")
    def test_safe_remove_post_invalid_index(self, mock_save):
        """Test x√≥a post v·ªõi index kh√¥ng h·ª£p l·ªá"""
        safe_remove_post(999)  # Index qu√° l·ªõn
        
        # Kh√¥ng ƒë∆∞·ª£c g·ªçi save_posts
        mock_save.assert_not_called()

# ==========================================
# ====== INTEGRATION TESTS ======
# ==========================================

class TestIntegration:
    
    @patch("app.generate_caption")
    @patch("app.handle_image_upload")
    @patch("app.schedule_post_to_sheet")
    def test_create_post_workflow_auto_mode(self, mock_schedule, mock_upload, mock_caption):
        """Test workflow t·∫°o b√†i ƒëƒÉng ·ªü ch·∫ø ƒë·ªô t·ª± ƒë·ªông"""
        # Setup mocks
        mock_caption.return_value = "Generated caption #xuongbinhgom"
        mock_upload.return_value = "https://example.com/image.jpg"
        
        # Mock data nh∆∞ t·ª´ UI
        product_name = "B√¨nh g·ªëm"
        keywords = "handmade, decor"
        platform = "Facebook"
        
        # Simulate workflow steps
        caption = generate_caption(product_name, keywords, platform)
        mock_file = MagicMock()
        image_url = handle_image_upload(mock_file, platform)
        
        # Verify workflow
        assert "#xuongbinhgom" in caption
        assert image_url.startswith("https://")
        
        mock_caption.assert_called_once_with(product_name, keywords, platform)
        mock_upload.assert_called_once_with(mock_file, platform)
    
    @patch("app.load_posts")
    @patch("app.save_posts")
    @patch("app.get_safe_posts_data")
    def test_manual_approval_workflow(self, mock_get_safe, mock_save, mock_load):
        """Test workflow duy·ªát b√†i th·ªß c√¥ng"""
        # Setup initial data
        initial_posts = [
            {"id": "001", "caption": "Test post", "platform": "Facebook"}
        ]
        mock_load.return_value = initial_posts
        mock_get_safe.return_value = initial_posts
        
        # Simulate approval process
        posts = get_safe_posts_data()
        assert len(posts) == 1
        
        # After approval, post should be removed
        mock_get_safe.return_value = []
        posts_after = get_safe_posts_data()
        assert len(posts_after) == 0

if __name__ == "__main__":
    # Ch·∫°y t·∫•t c·∫£ tests
    pytest.main([__file__, "-v", "--tb=short"])
    print("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ unit tests!")
    print("üìä Coverage bao g·ªìm:")
    print("   - 4 Utility Functions tests")
    print("   - 3 Facebook API Functions tests") 
    print("   - 2 AI & Content Functions tests")
    print("   - 3 Image Upload Functions tests")
    print("   - 3 UI Helper Functions tests")
    print("   - 2 Integration Tests")
    print("   - T·ªïng c·ªông: 6 test classes v·ªõi 20+ test cases")
    print("   - Error handling, edge cases, mocking APIs")
    print("   - Platform-specific logic testing")
    print("   - Session state management testing") 