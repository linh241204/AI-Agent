import csv
import time
import requests
from datetime import datetime, timedelta # Import timedelta cho vi·ªác c·∫≠p nh·∫≠t ng√†y

CSV_FILE = "scheduled_posts.csv"

# ‚úÖ G·∫ÆN S·∫¥N PAGE ID & ACCESS TOKEN (n√™n l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c secrets n·∫øu deploy)
DEFAULT_PAGE_ID = "2076435142631541"
DEFAULT_ACCESS_TOKEN = "EAAbHPY5s4I4BO4lcMP4spMukwjZCmNdt0twbIGVdHAqUY6Q4OYThmtoFbOqx2tCw3yyZB8fKEnbxQbIAiNc7hvvzO4mVZBLnCpIOHvjaRRvpx9DbQjSUSWtPexZC1j812CZCu5DF6OFZB1sHmVSivK8cb9TvxGFmlJMgKWsF0zAsS0zdNZCbenZCaOZBnt2hZCw5zF0HrK" # Token n√†y c√≥ th·ªÉ h·∫øt h·∫°n, c·∫ßn ki·ªÉm tra

def post_content_to_facebook(page_id, access_token, message, image_url=None):
    if image_url:
        url = f"https://graph.facebook.com/v19.0/{page_id}/photos"
        data = {
            "message": message,
            "url": image_url, # S·ª≠ d·ª•ng 'url' n·∫øu ·∫£nh t·ª´ URL
            "access_token": access_token
        }
    else:
        url = f"https://graph.facebook.com/v19.0/{page_id}/feed"
        data = {
            "message": message,
            "access_token": access_token
        }
    
    try:
        response = requests.post(url, data=data)
        response.raise_for_status() # B√°o l·ªói n·∫øu status code l√† 4xx/5xx
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói khi g·ªçi API Facebook: {e}")
        if response is not None:
            print(f"   Ph·∫£n h·ªìi l·ªói t·ª´ Facebook: {response.text}")
        return {"error": str(e)}

print("üü¢ Scheduler AI Agent ƒëang ch·∫°y... (ki·ªÉm tra m·ªói 60 gi√¢y)")

while True:
    now = datetime.now()
    updated_rows = []

    try:
        with open(CSV_FILE, "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            rows = list(reader)
    except FileNotFoundError:
        print(f"‚ÑπÔ∏è File CSV '{CSV_FILE}' kh√¥ng t·ªìn t·∫°i. ƒêang ch·ªù b√†i ƒëƒÉng m·ªõi...")
        time.sleep(60)
        continue
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file CSV: {e}")
        time.sleep(60)
        continue

    for i, row in enumerate(rows):
        if len(row) < 10:
            print(f"‚ö†Ô∏è B·ªè qua d√≤ng {i+1} thi·∫øu c·ªôt ho·∫∑c sai ƒë·ªãnh d·∫°ng: {row}")
            updated_rows.append(row)
            continue

        try:
            # Gi·∫£i n√©n c√°c c·ªôt
            product, keywords, platform, time_str, token, page_id, mode, date_str, caption, image_path = row[:10]

            # X·ª≠ l√Ω c√°c gi√° tr·ªã
            scheduled_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            token = token.strip() if token.strip() else DEFAULT_ACCESS_TOKEN
            page_id = page_id.strip() if page_id.strip() else DEFAULT_PAGE_ID
            platform = platform.strip().lower()
            mode = mode.strip().lower()
            caption = caption.strip()
            image_path = image_path.strip() # ƒê·∫£m b·∫£o image_path c≈©ng ƒë∆∞·ª£c l√†m s·∫°ch

            print(f"\nüìÑ [{product}] | Mode: {mode} | L·ªãch: {scheduled_time} | Hi·ªán t·∫°i: {now}")

            # --- Logic x·ª≠ l√Ω ch·∫ø ƒë·ªô ƒëƒÉng ---
            if platform == "facebook":
                if mode == "once":
                    if now >= scheduled_time:
                        print("üöÄ ƒêang ƒëƒÉng b√†i (once)...")
                        result = post_content_to_facebook(page_id, token, caption, image_path)
                        if "error" not in result:
                            print(f"‚úÖ ƒê√£ ƒëƒÉng b√†i 'once': {result}. B√†i n√†y s·∫Ω ƒë∆∞·ª£c x√≥a.")
                            # Kh√¥ng th√™m v√†o updated_rows ƒë·ªÉ x√≥a kh·ªèi CSV
                        else:
                            print(f"‚ùå L·ªói khi ƒëƒÉng b√†i 'once': {result}. Gi·ªØ l·∫°i ƒë·ªÉ th·ª≠ l·∫°i.")
                            updated_rows.append(row) # Gi·ªØ l·∫°i n·∫øu l·ªói ƒë·ªÉ th·ª≠ l·∫°i l·∫ßn sau
                    else:
                        updated_rows.append(row) # Ch∆∞a ƒë·∫øn gi·ªù, gi·ªØ l·∫°i
                
                elif mode == "daily":
                    # ƒê·ªÉ x·ª≠ l√Ω ƒëƒÉng daily, c·∫ßn c·∫≠p nh·∫≠t ng√†y ƒëƒÉng trong CSV
                    # n·∫øu b√†i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng cho ng√†y hi·ªán t·∫°i.
                    # ƒêi·ªÅu ki·ªán: ƒë√£ ƒë·∫øn gi·ªù c·ªßa ng√†y h√¥m nay
                    if now.date() == scheduled_time.date() and now >= scheduled_time:
                        print("üöÄ ƒêang ƒëƒÉng b√†i (daily) cho h√¥m nay...")
                        result = post_content_to_facebook(page_id, token, caption, image_path)
                        if "error" not in result:
                            print(f"‚úÖ ƒê√£ ƒëƒÉng b√†i 'daily' cho {scheduled_time.date()}: {result}.")
                            # C·∫≠p nh·∫≠t scheduled_time sang ng√†y mai v√† th√™m v√†o updated_rows
                            next_scheduled_time = scheduled_time + timedelta(days=1)
                            row[7] = next_scheduled_time.strftime("%Y-%m-%d") # C·∫≠p nh·∫≠t date_str
                            updated_rows.append(row)
                        else:
                            print(f"‚ùå L·ªói khi ƒëƒÉng b√†i 'daily': {result}. Gi·ªØ l·∫°i ƒë·ªÉ th·ª≠ l·∫°i.")
                            updated_rows.append(row) # Gi·ªØ l·∫°i n·∫øu l·ªói ƒë·ªÉ th·ª≠ l·∫°i l·∫ßn sau
                    elif now.date() > scheduled_time.date():
                         # N·∫øu ƒë√£ qu√° ng√†y d·ª± ki·∫øn ƒëƒÉng (v√≠ d·ª• scheduler b·ªã d·ª´ng)
                         # C·∫≠p nh·∫≠t ng√†y d·ª± ki·∫øn ƒëƒÉng ƒë·∫øn h√¥m nay ho·∫∑c ng√†y mai ƒë·ªÉ ti·∫øp t·ª•c
                        print(f"‚ÑπÔ∏è B√†i ƒëƒÉng 'daily' ƒë√£ qu√° h·∫°n ({scheduled_time.date()}). C·∫≠p nh·∫≠t ng√†y.")
                        
                        # ƒêi·ªÅu ch·ªânh scheduled_time ƒë·ªÉ n√≥ l√† ng√†y h√¥m nay HO·∫∂C ng√†y mai
                        # ƒê·∫£m b·∫£o scheduled_time l√† th·ªùi gian trong t∆∞∆°ng lai g·∫ßn nh·∫•t
                        temp_scheduled_time = scheduled_time
                        while temp_scheduled_time.date() < now.date():
                            temp_scheduled_time += timedelta(days=1)
                        
                        # N·∫øu ng√†y ƒë√£ l√† h√¥m nay nh∆∞ng gi·ªù ch∆∞a t·ªõi, gi·ªØ nguy√™n.
                        # N·∫øu ng√†y ƒë√£ l√† h√¥m nay v√† gi·ªù ƒë√£ qua, chuy·ªÉn sang ng√†y mai.
                        if temp_scheduled_time.date() == now.date() and now >= temp_scheduled_time:
                            temp_scheduled_time += timedelta(days=1)

                        row[7] = temp_scheduled_time.strftime("%Y-%m-%d")
                        updated_rows.append(row)

                    else: # Ch∆∞a ƒë·∫øn ng√†y ho·∫∑c gi·ªù c·ªßa b√†i daily
                        updated_rows.append(row) # Gi·ªØ l·∫°i
                
                elif mode == "manual":
                    # B√†i manual ch·ªâ ƒë∆∞·ª£c x·ª≠ l√Ω th·ªß c√¥ng t·ª´ Streamlit App, kh√¥ng ph·∫£i t·ª´ scheduler n√†y
                    updated_rows.append(row)
                    print(f"‚ÑπÔ∏è B√†i ƒëƒÉng 'manual' ƒë∆∞·ª£c b·ªè qua b·ªüi scheduler.")
                
                else:
                    print(f"‚ö†Ô∏è Ch·∫ø ƒë·ªô '{mode}' kh√¥ng h·ª£p l·ªá. Gi·ªØ l·∫°i d√≤ng.")
                    updated_rows.append(row)
            else: # Kh√¥ng ph·∫£i platform Facebook ho·∫∑c Instagram
                updated_rows.append(row) # Gi·ªØ l·∫°i

        except ValueError as ve:
            print(f"‚ùå L·ªói ƒë·ªãnh d·∫°ng ng√†y/gi·ªù trong d√≤ng {i+1}: {row}. L·ªói: {ve}. B·ªè qua d√≤ng n√†y.")
            updated_rows.append(row)
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω d√≤ng {i+1}: {row}. L·ªói: {e}")
            updated_rows.append(row)

    try:
        with open(CSV_FILE, "w", encoding="utf-8", newline="") as f:
            writer = csv.writer(f)
            writer.writerows(updated_rows)
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ghi l·∫°i file CSV: {e}")

    time.sleep(60) # Ch·ªù 60 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
