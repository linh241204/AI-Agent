import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import uuid
import csv
import requests
from openai import OpenAI, OpenAIError

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# G√°n access token & page ID tr·ª±c ti·∫øp (n·∫øu mu·ªën hardcode)
FB_PAGE_TOKEN = "EAASMk7sVKQ8BO8q9kUhe73q0pFsRhyedqzksZBgFkQfdDtWHCG3kDDHVaXOfLeZBKaYP6ss102fJ3WModXczUyWg8ZCbajYpfkW1P8pLoACn45rc9ZCzZAoR7SWqXyXlaiZCLm5NIZCXOB0JO4Bb6vNNWdaKquabc4STA1uV3MN7sVz57X7FYMVvGfyok67x9pAZBpOLtLMy1NtkZCwFmbFzNeo4pbdLO"
FB_PAGE_ID = "112233445566778"  # <- thay b·∫±ng ID trang Facebook b·∫°n qu·∫£n l√Ω

# T·∫°o OpenAI client t·ª´ OpenRouter
client = OpenAI(
    api_key=os.getenv("OPENROUTER_API_KEY"),
    base_url="https://openrouter.ai/api/v1"
)

# H√†m sinh caption b·∫±ng GPT
def generate_caption(product_name, keywords, platform):
    prompt = f"""
B·∫°n l√† chuy√™n gia n·ªôi dung s√°ng t·∫°o cho th∆∞∆°ng hi·ªáu g·ªëm th·ªß c√¥ng cao c·∫•p.

H√£y vi·∫øt m·ªôt **b√†i vi·∫øt marketing d√†i kho·∫£ng 100‚Äì150 t·ª´** ph√π h·ª£p ƒëƒÉng tr√™n {platform}, ƒë·ªÉ gi·ªõi thi·ªáu s·∫£n ph·∫©m **{product_name}**, s·ª≠ d·ª•ng tinh t·∫ø c√°c t·ª´ kh√≥a: {keywords}.

Y√™u c·∫ßu:
- Gi·ªçng vƒÉn m·ªôc m·∫°c, s√¢u s·∫Øc, truy·ªÅn c·∫£m h·ª©ng
- L·ªìng gh√©p c·∫£m x√∫c, tri·∫øt l√Ω s·ªëng ch·∫≠m, y√™u n√©t ƒë·∫πp truy·ªÅn th·ªëng
- Kh√¥ng qu√° b√°n h√†ng. T·∫≠p trung g·ª£i c·∫£m gi√°c, kh√¥ng gian, c·∫£m x√∫c ng∆∞·ªùi d√πng
- C√≥ th·ªÉ m·ªü ƒë·∫ßu b·∫±ng m·ªôt h√¨nh ·∫£nh ho·∫∑c c·∫£m nh·∫≠n ƒë·ªùi th∆∞·ªùng
- K·∫øt b√†i nh·∫π nh√†ng, c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi g·ª£i m·ªü
- G·∫Øn hashtag cu·ªëi b√†i. Kh√¥ng li·ªát k√™ hashtag qu√° d√†i

Vi·∫øt 1 b√†i duy nh·∫•t.
"""
    try:
        response = client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.95
        )
        return response.choices[0].message.content.strip()
    except OpenAIError as e:
        return f"‚ö†Ô∏è Kh√¥ng g·ªçi ƒë∆∞·ª£c GPT: {e}"

# H√†m ƒëƒÉng b√†i vi·∫øt l√™n Facebook
def post_to_facebook(caption, image_path):
    url = f"https://graph.facebook.com/{FB_PAGE_ID}/photos"
    with open(image_path, "rb") as img:
        files = {"source": img}
        data = {
            "caption": caption,
            "access_token": FB_PAGE_TOKEN
        }
        response = requests.post(url, data=data, files=files)
        return response.json()

# Giao di·ªán ch·ªçn ch·∫ø ƒë·ªô ƒëƒÉng
mode = st.radio("Ch·∫ø ƒë·ªô ƒëƒÉng", [
    "üìÖ T·ª± ƒë·ªông ƒë√∫ng gi·ªù",
    "ü§ñ T·ª± ƒë·ªông ƒëƒÉng ƒëa d·∫°ng m·ªói ng√†y",
    "üëÄ Ch·ªù duy·ªát th·ªß c√¥ng"
])

# Giao di·ªán theo ch·∫ø ƒë·ªô
if mode == "üìÖ T·ª± ƒë·ªông ƒë√∫ng gi·ªù":
    post_date = st.date_input("üìÖ Ng√†y ƒëƒÉng", datetime.today(), key="post_date_once")
    post_time = st.time_input("‚è∞ Gi·ªù ƒëƒÉng", datetime.now().time(), key="post_time_once")

elif mode == "ü§ñ T·ª± ƒë·ªông ƒëƒÉng ƒëa d·∫°ng m·ªói ng√†y":
    start_date = st.date_input("üìÖ Ng√†y b·∫Øt ƒë·∫ßu", datetime.today(), key="start_date_loop")
    end_date = st.date_input("üìÖ Ng√†y k·∫øt th√∫c", datetime.today() + timedelta(days=3), key="end_date_loop")
    post_time = st.time_input("‚è∞ Gi·ªù ƒëƒÉng m·ªói ng√†y", datetime.now().time(), key="post_time_loop")

else:  # üëÄ Ch·ªù duy·ªát th·ªß c√¥ng
    post_date, post_time = None, None
# Tabs ch√≠nh
st.set_page_config(layout="wide")
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìù T·∫°o n·ªôi dung", "üìä Hi·ªáu qu·∫£", "üéØ G·ª£i √Ω chi·∫øn l∆∞·ª£c", "üîÆ D·ª± b√°o", "üì• B√†i ch·ªù duy·ªát"
])

# Tab 2: Hi·ªáu qu·∫£ b√†i vi·∫øt
with tab2:
    st.header("üìä Hi·ªáu qu·∫£ b√†i vi·∫øt")
    if os.path.exists("metrics.csv"):
        df = pd.read_csv("metrics.csv")
        st.dataframe(df)
        st.metric("T·ªïng reach", df["reach"].sum())
        st.metric("T·ªïng likes", df["likes"].sum())
        st.metric("T·ªïng shares", df["shares"].sum())
        fig, ax = plt.subplots()
        df.groupby("platform")[["likes", "shares"]].sum().plot(kind="bar", ax=ax)
        st.pyplot(fig)
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu hi·ªáu qu·∫£ b√†i vi·∫øt.")

# Tab 3: G·ª£i √Ω chi·∫øn l∆∞·ª£c
with tab3:
    st.header("üéØ G·ª£i √Ω chi·∫øn l∆∞·ª£c")
    if os.path.exists("metrics.csv"):
        df = pd.read_csv("metrics.csv")
        prompt = f"""D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu hi·ªáu qu·∫£ b√†i vi·∫øt:
{df[['platform','caption','likes','shares','reach']].to_string(index=False)}

H√£y ƒë√°nh gi√° v√† g·ª£i √Ω c·∫£i thi·ªán n·ªôi dung b√†i vi·∫øt.
"""
        if st.button("üß† G·ª£i √Ω t·ª´ AI"):
            try:
                res = client.chat.completions.create(
                    model="openai/gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.8
                )
                st.markdown(res.choices[0].message.content.strip())
            except Exception as e:
                st.error(f"‚ùå L·ªói AI: {e}")
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch.")

# Tab 4: D·ª± b√°o hi·ªáu qu·∫£
with tab4:
    st.header("üîÆ D·ª± b√°o hi·ªáu qu·∫£ b√†i vi·∫øt")
    caption = st.text_area("üìã N·ªôi dung b√†i vi·∫øt")
    if st.button("üìà D·ª± b√°o"):
        if caption:
            prompt = f"""
B·∫°n l√† chuy√™n gia digital marketing. D∆∞·ªõi ƒë√¢y l√† n·ªôi dung b√†i vi·∫øt:
"""
            prompt += caption + """

D·ª± b√°o hi·ªáu qu·∫£ v√† ƒë∆∞a ra l·ªùi khuy√™n c·∫£i thi·ªán n·∫øu c·∫ßn.
"""
            try:
                res = client.chat.completions.create(
                    model="openai/gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.9
                )
                st.markdown(res.choices[0].message.content.strip())
            except Exception as e:
                st.error(f"‚ùå L·ªói khi g·ªçi GPT: {e}")

# Tab 5: B√†i ch·ªù duy·ªát
with tab5:
    st.header("üì• Danh s√°ch b√†i vi·∫øt ch·ªù duy·ªát")
    if os.path.exists("pending_posts.csv"):
        df = pd.read_csv("pending_posts.csv")
        st.dataframe(df)
    else:
        st.info("Kh√¥ng c√≥ b√†i vi·∫øt n√†o ƒëang ch·ªù duy·ªát.")

